generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

model BlogUser {
  id        Int             @id @default(autoincrement())
  username  String          @unique
  password  String?
  isAdmin   Boolean         @default(false)
  isDeleted Boolean         @default(false)
  createdAt DateTime        @default(now())
  deletedAt DateTime?
  oauths    BlogOauthUser[]
  posts     BlogPost[]
  comments  BlogComment[]
}

model BlogOauthUser {
  id       Int      @id @default(autoincrement())
  provider String
  subject  String
  user     BlogUser @relation(fields: [userId], references: [id])
  userId   Int

  @@unique([provider, subject])
}

model BlogPost {
  id        Int           @id @default(autoincrement())
  title     String
  content   String
  published Boolean       @default(false)
  author    BlogUser      @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isDeleted Boolean       @default(false)
  tags      BlogTag[] // Implicit many-to-many relation
  comments  BlogComment[]

  @@index([updatedAt(sort: Desc)])
}

model BlogTag {
  id    Int        @id @default(autoincrement())
  tag   String     @unique
  posts BlogPost[] // Implicit many-to-many relation
}

model BlogComment {
  id        Int      @id @default(autoincrement())
  content   String
  author    BlogUser @relation(fields: [authorId], references: [id])
  authorId  Int
  post      BlogPost @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([postId, updatedAt(sort: Desc)])
}

// For @quixo3/prisma-session-store
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
