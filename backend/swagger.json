{
  "openapi": "3.0.0",
  "info": {
    "title": "Fancy Blog API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/comment/": {
      "post": {
        "summary": "Create a new comment",
        "description": "Create a new comment. For authenticated user only.",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The JWT token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "postId": {
                    "type": "string",
                    "description": "The ID of the post to which the comment belongs"
                  },
                  "content": {
                    "type": "string",
                    "description": "The content of the comment"
                  }
                },
                "required": [
                  "postId",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the created comment"
                    },
                    "postId": {
                      "type": "string",
                      "description": "The ID of the post"
                    },
                    "content": {
                      "type": "string",
                      "description": "The content of the comment"
                    },
                    "updatededAt": {
                      "type": "string",
                      "description": "The date and time of the last update"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid JWT token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/comment/{id}": {
      "put": {
        "summary": "Update a comment",
        "description": "Update an existing comment. Only the author can update their own comment. Requires a valid JWT token.",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The JWT token"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the comment"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The new content of the comment"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the updated comment"
                    },
                    "postId": {
                      "type": "string",
                      "description": "The ID of the post"
                    },
                    "content": {
                      "type": "string",
                      "description": "The content of the comment"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "The date and time of the last update"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid JWT token"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a comment",
        "description": "Delete an existing comment. The author can delete their own comment. Admin can delete all comments. Requires a valid JWT token.",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The JWT token"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the comment to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized - invalid JWT token"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/user": {
      "post": {
        "summary": "Register a new user",
        "description": "Register a new user. - Username shoule be 6 to 64 characters, and unique. - Password should be 6 to 64 characters, and secure.",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Location": {
                "description": "URL to get the user information",
                "schema": {
                  "type": "string",
                  "example": "/api/user/"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "The registered username"
                    },
                    "token": {
                      "type": "string",
                      "description": "JWT token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "summary": "Get the user information",
        "description": "Get the user information.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "JWT token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "User's username, max 64 characters"
                    },
                    "isAdmin": {
                      "type": "boolean",
                      "description": "Is the user an admin"
                    },
                    "oauthProviders": {
                      "type": "array",
                      "description": "List of OAuth providers and subjects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "provider": {
                            "type": "string",
                            "description": "OAuth provider (e.g., Google, Facebook)"
                          },
                          "subject": {
                            "type": "string",
                            "description": "OAuth subject (unique identifier from the provider)"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Update the user information",
        "description": "Update the user information. - Username shoule be 6 to 64 characters, and unique. - Password should be 6 to 64 characters, and secure.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "JWT token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "adminCode": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "The registered username"
                    },
                    "token": {
                      "type": "string",
                      "description": "Optional new JWT token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Delete the user",
        "description": "Delete the user.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "JWT token"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/user/login": {
      "post": {
        "summary": "User login",
        "description": "User login - Username should be 6 to 64 characters, and unique. - Password should be 6 to 64 characters, and secure.",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "The logged-in username"
                    },
                    "token": {
                      "type": "string",
                      "description": "JWT token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/user/google": {
      "get": {
        "summary": "Oauth login with Google.",
        "description": "Redirect to Google for OAuth login.",
        "tags": [
          "Users"
        ],
        "responses": {
          "302": {
            "description": "Redirecting to Google for authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/user/google/callback": {
      "get": {
        "summary": "Handle Google OAuth callback for creating or binding.",
        "description": "Handle Google OAuth callback to create a new user or bind to an existing user.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "Optional JWT token, leave empty for creating a new user."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "The registered username"
                    },
                    "token": {
                      "type": "string",
                      "description": "JWT token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid JWT token"
          },
          "409": {
            "description": "The account already bound to another user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/user/github": {
      "get": {
        "summary": "Oauth login with Github.",
        "description": "Redirect to Github for OAuth login.",
        "tags": [
          "Users"
        ],
        "responses": {
          "302": {
            "description": "Redirecting to Github for authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/user/github/callback": {
      "get": {
        "summary": "Handle Github OAuth callback for creating or binding.",
        "description": "Handle Github OAuth callback to create a new user or bind to an existing user.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "Optional JWT token, leave empty for creating a new user."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "The registered username"
                    },
                    "isAdmin": {
                      "type": "boolean",
                      "description": "Is the user an admin"
                    },
                    "token": {
                      "type": "string",
                      "description": "JWT token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid JWT token"
          },
          "409": {
            "description": "The account already bound to another user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {},
  "tags": []
}